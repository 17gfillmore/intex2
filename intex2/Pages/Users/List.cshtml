@page

@model ListModel
@*
    Description: The UserManager<IdentityUser>
    class is set up as a service so that it can be consumed via dependency injection. The Users
    property returns a collection of IdentityUser objects, which can be used to enumerate the user accounts. This Razor Page displays
    the users in a table, with buttons that allow each user to be edited or deleted, although this won’t be visible initially because a
    placeholder message is shown when there are no user objects to display. There is a button that navigates to a Razor Page named
    Create, which I define in the next section.
*@


<!-- start section -->
<section class="overflow-visible border-top border-color-medium-gray bg-light-gray">
    <div class="container">
        <div class="row margin-5-half-rem-bottom align-items-center">
            <div class="col-12 col-lg-6 col-md-7 text-center text-md-left sm-margin-10px-bottom wow animate__fadeIn" data-wow-delay="0.1s">
                <h5 class="alt-font font-weight-600 text-extra-dark-gray letter-spacing-minus-1px text-uppercase margin-5px-bottom">Manage Roles</h5>
                <p class="m-0 d-block">Edit the table below to manage the roles within the organization.</p>
            </div>
        </div>
        <div class="row">
            <div class="col-12 p-0 wow animate__fadeIn" data-wow-delay="0.4s">
                <div>
                    <div class="swiper-wrapper">
                        <!-- start info banner slider item -->
                        <div class="swiper-slide box-shadow-small">
                            <div class="position-relative bg-white padding-3-rem-all">
                                <table class="table table-sm table-bordered">
                                    <tr>
                                        <th>ID</th>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Actions</th>
                                    </tr>
                                    @if (Model.Users.Count() == 0)
                                    {
                                        <tr>
                                            <td colspan="4" class="text-center">No User Accounts</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        foreach (IdentityUser user in Model.Users)
                                        {
                                            <tr>
                                                <td>@user.Id</td>
                                                <td>@user.UserName</td>
                                                <td>@user.Email</td>
                                                <td class="text-center">
                                                    <form asp-page="List" method="post">
                                                        <input type="hidden" name="Id" value="@user.Id" />
                                                        <a class="btn btn-sm btn-warning" asp-page="Editor" asp-route-id="@user.Id" asp-route-mode="edit">Edit</a>
                                                        <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                                                    </form>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </table>
                                <a class="btn btn-fancy btn-dark-gray" asp-page="Create">New Role</a>
                                <a class="btn btn-fancy btn-outline-dark-gray" href="/Account/logout">Logout</a>
                            </div>
                        </div>
                        <!-- end info banner slider item -->
                    </div>
                </div>
            </div>
        </div><br><br><br>
    </div>
</section>
<!-- end section -->

<style>
    .btn.btn-outline-dark-gray {
        background: #fff;
        border-color: #232323;
        color: #232323;
    }

        .btn.btn-outline-dark-gray:hover {
            background: #232323;
            border-color: #232323;
            color: #fff;
            padding: .375rem .75rem;
        }
</style>




<table class="table table-sm table-bordered">
    <tr><th>ID</th><th>Name</th><th>Email</th><th></th></tr>
    @if (Model.Users.Count() == 0)
    {
        <tr><td colspan="4" class="text-center">No User Accounts</td></tr>
    }
    else
    {
        foreach (IdentityUser user in Model.Users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.UserName</td>
                <td>@user.Email</td>
                <td class="text-center">
                    <form asp-page="List" method="post">
                        <input type="hidden" name="Id" value="@user.Id" />
                        <a class="btn btn-sm btn-warning" asp-page="Editor"
                           asp-route-id="@user.Id" asp-route-mode="edit">Edit</a>
                        <button type="submit" class="btn btn-sm btn-danger">
                            Delete
                        </button>
                    </form>
                </td>
            </tr>
        }
    }
</table>
<a class="btn btn-primary" asp-page="create">Create</a>
@functions {
    public class ListModel : PageModel
    {
        public UserManager<IdentityUser> UserManager;
        public ListModel(UserManager<IdentityUser> userManager)
        {
            UserManager = userManager;
        }
        public IEnumerable<IdentityUser> Users { get; set; }
        public void OnGet()
        {
            Users = UserManager.Users;
        }
        public async Task<IActionResult> OnPostAsync(string id)
        {
            IdentityUser user = await UserManager.FindByIdAsync(id);
            if (user != null)
            {
                await UserManager.DeleteAsync(user);
            }
            return RedirectToPage();
        }
    }
}
