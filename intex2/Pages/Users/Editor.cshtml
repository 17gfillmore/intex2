@page "{id}"

@model EditorModel

<!-- start page title -->
<section class="wow animate__fadeIn bg-light-gray padding-25px-tb page-title-small">
    <div class="container">
        <div class="row align-items-center justify-content-center">
            <div class="col-12 col-xl-4 col-lg-6 justify-content-center justify-content-lg-end text-small alt-font md-margin-10px-top">
                <br>
            </div>
        </div>
    </div>
</section>
<!-- end page title -->
<!-- start section -->
<section class="wow animate__fadeIn" style="padding: 70px;">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-xl-5 col-md-6 lg-padding-30px-lr md-padding-15px-lr sm-margin-40px-bottom">
                <div class="m-1 text-danger text-center" asp-validation-summary="All"></div>
                <h6 class="alt-font text-center font-weight-700 text-extra-dark-gray">Edit User</h6>
                <form class="bg-light-gray padding-4-rem-all lg-margin-35px-top md-padding-2-half-rem-all" method="post">
                    <label class="margin-15px-bottom">Id <span class="required-error text-radical-red">*</span></label>
                    <input class="small-input bg-white margin-20px-bottom required" type="text" name="Id" asp-for="Id" value="@Model.Id" disabled>
                    <input class="small-input bg-white margin-20px-bottom required" type="text" name="Id" asp-for="Id" value="@Model.Id" hidden>
                    <label class="margin-15px-bottom">Email <span class="required-error text-radical-red">*</span></label>
                    <input class="small-input bg-white margin-20px-bottom required" type="text" name="Email" asp-for="Email" value="@Model.Email" placeholder="Enter your email">
                    <label class="margin-15px-bottom">Username <span class="required-error text-radical-red">*</span></label>
                    <input class="small-input bg-white margin-20px-bottom required" type="text" name="UserName" asp-for="UserName" value="@Model.UserName" placeholder="Enter your username">
                    <label class="margin-15px-bottom">Password <span class="required-error text-radical-red">*</span></label>
                    <input class="small-input bg-white margin-20px-bottom required" type="password" name="Password" asp-for="Password" value="@Model.Password" placeholder="Enter your password">
                    <label class="margin-25px-bottom">
                        <input class="d-inline-block align-middle w-auto mb-0 margin-5px-right" type="checkbox" name="account">
                        <span class="d-inline-block align-middle">Remember me</span>
                    </label>
                    <button class="btn btn-medium btn-fancy btn-dark-gray w-100 submit" type="submit">Submit</button>
                </form>
            </div>
        </div>
    </div>

</section>
<!-- end section -->

<style>
    .btn.btn-outline-dark-gray {
        background: #fff;
        border-color: #232323;
        color: #232323;
    }

        .btn.btn-outline-dark-gray:hover {
            background: #232323;
            border-color: #232323;
            color: #fff;
            padding: .375rem .75rem;
        }
</style>


@functions {
    public class EditorModel : PageModel
    {
        public UserManager<IdentityUser> UserManager;
        public EditorModel(UserManager<IdentityUser> usrManager)
        {
            UserManager = usrManager;
        }
        [BindProperty]
        [Required]
        public string Id { get; set; }
        [BindProperty]
        [Required]
        public string UserName { get; set; }
        [BindProperty]
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        [BindProperty]
        public string Password { get; set; }
        public async Task OnGetAsync(string id)
        {
            IdentityUser user = await UserManager.FindByIdAsync(id);
            Id = user.Id; UserName = user.UserName; Email = user.Email;
        }
        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                IdentityUser user = await UserManager.FindByIdAsync(Id);
                user.UserName = UserName;
                user.Email = Email;
                IdentityResult result = await UserManager.UpdateAsync(user);
                if (result.Succeeded && !String.IsNullOrEmpty(Password))
                {
                    await UserManager.RemovePasswordAsync(user);
                    result = await UserManager.AddPasswordAsync(user, Password);
                }
                if (result.Succeeded)
                {
                    return RedirectToPage("List");
                }
                foreach (IdentityError err in result.Errors)
                {
                    ModelState.AddModelError("", err.Description);
                }
            }
            return Page();
        }
    }
}